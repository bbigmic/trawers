import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testOrders() {
  try {
    console.log('üîç Sprawdzanie kurs√≥w w bazie danych...')
    
    // Sprawd≈∫ kursy
    const courses = await prisma.course.findMany()
    console.log(`üìö Znaleziono ${courses.length} kurs√≥w:`)
    courses.forEach(course => {
      console.log(`  - ${course.title} (ID: ${course.id}) - ${course.price} z≈Ç`)
    })

    if (courses.length === 0) {
      console.log('‚ùå Brak kurs√≥w w bazie danych!')
      return
    }

    console.log('\nüë• Sprawdzanie u≈ºytkownik√≥w...')
    
    // Sprawd≈∫ u≈ºytkownik√≥w
    const users = await prisma.user.findMany()
    console.log(`üë§ Znaleziono ${users.length} u≈ºytkownik√≥w:`)
    users.forEach(user => {
      console.log(`  - ${user.email} (ID: ${user.id}) - Rola: ${user.role}`)
    })

    if (users.length === 0) {
      console.log('‚ùå Brak u≈ºytkownik√≥w w bazie danych!')
      return
    }

    console.log('\nüì¶ Sprawdzanie zam√≥wie≈Ñ...')
    
    // Sprawd≈∫ zam√≥wienia
    const orders = await prisma.order.findMany({
      include: {
        user: {
          select: {
            email: true
          }
        },
        course: {
          select: {
            title: true
          }
        }
      }
    })
    
    console.log(`üõí Znaleziono ${orders.length} zam√≥wie≈Ñ:`)
    orders.forEach(order => {
      console.log(`  - ID: ${order.id}`)
      console.log(`    U≈ºytkownik: ${order.user.email}`)
      console.log(`    Kurs: ${order.course.title}`)
      console.log(`    Status: ${order.status}`)
      console.log(`    Kwota: ${order.amount} z≈Ç`)
      console.log(`    Data: ${order.createdAt}`)
      console.log('')
    })

    // Utw√≥rz testowe zam√≥wienie je≈õli nie ma ≈ºadnych
    if (orders.length === 0) {
      console.log('‚ûï Tworzenie testowego zam√≥wienia...')
      
      const testUser = users[0]
      const testCourse = courses[0]
      
      const testOrder = await prisma.order.create({
        data: {
          userId: testUser.id,
          courseId: testCourse.id,
          status: 'COMPLETED',
          amount: testCourse.price,
          paymentId: 'test-payment-' + Date.now(),
        },
        include: {
          user: {
            select: {
              email: true
            }
          },
          course: {
            select: {
              title: true
            }
          }
        }
      })
      
      console.log('‚úÖ Utworzono testowe zam√≥wienie:')
      console.log(`  - ID: ${testOrder.id}`)
      console.log(`  - U≈ºytkownik: ${testOrder.user.email}`)
      console.log(`  - Kurs: ${testOrder.course.title}`)
      console.log(`  - Status: ${testOrder.status}`)
      console.log(`  - Kwota: ${testOrder.amount} z≈Ç`)
    }

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas testowania:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testOrders() 